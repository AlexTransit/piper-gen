package main

import (
	"archive/tar"
	"bytes"
	"context"
	"encoding/json"
	"flag"
	"fmt"
	"hash"
	"io"
	"log"
	"net/http"
	"net/url"
	"os"
	"os/exec"
	"path/filepath"
	"sort"
	"strings"

	"github.com/amitybell/piper"
	"github.com/mholt/archiver/v4"
	"github.com/zeebo/xxh3"
)

type Meta struct {
	Version string
	Hash    xxh3.Uint128
}

func download(rootDir string, srcURL string) (dlFn string, retErr error) {
	dlFn = filepath.Join(
		rootDir,
		"piper-gen.cache",
		url.QueryEscape(srcURL),
	)
	if _, err := os.Stat(dlFn); err == nil {
		return dlFn, nil
	}

	os.MkdirAll(filepath.Dir(dlFn), 0o755)

	out, err := os.Create(dlFn)
	defer func() {
		closeErr := out.Close()
		if closeErr != nil && retErr == nil {
			retErr = closeErr
		}
		if retErr != nil {
			retErr = fmt.Errorf("download `%s` to `%s` failed: %w", srcURL, dlFn, err)
		}
	}()

	res, err := http.Get(srcURL)
	if err != nil {
		return "", fmt.Errorf("download: http.Get: %w", err)
	}
	defer res.Body.Close()

	if _, err := io.Copy(out, res.Body); err != nil {
		return "", fmt.Errorf("download: Copy: %w", err)
	}
	return dlFn, nil
}

func Extract(ctx context.Context, rootDir string, f archiver.File) (retErr error) {
	rfi, err := f.Stat()
	if err != nil {
		return fmt.Errorf("Extract: stat archive file: %w", err)
	}
	if rfi.IsDir() {
		return nil
	}

	fn := filepath.Join(rootDir, filepath.Clean(filepath.FromSlash(f.NameInArchive)))
	if _, err := os.Stat(fn); err == nil {
		return nil
	}

	os.MkdirAll(filepath.Dir(fn), 0o755)

	if rfi.Mode().Type()&os.ModeSymlink == os.ModeSymlink {
		err := os.Symlink(f.LinkTarget, fn)
		if err != nil {
			return fmt.Errorf("Extract: create symlink: %w", err)
		}
	}

	if !rfi.Mode().IsRegular() {
		return nil
	}

	r, err := f.Open()
	if err != nil {
		if err != nil {
			return fmt.Errorf("Extract: open archive file: %w", err)
		}
	}
	defer r.Close()
	w, err := os.OpenFile(fn, os.O_RDWR|os.O_CREATE|os.O_TRUNC, f.Mode().Perm())
	if err != nil {
		if err != nil {
			return fmt.Errorf("Extract: create output file: %w", err)
		}
	}
	defer func() {
		cloErr := w.Close()
		if retErr != nil {
			return
		}
		if cloErr != nil {
			retErr = fmt.Errorf("Extract: close output file: %w", err)
		}
	}()
	if _, err := io.Copy(w, r); err != nil {
		return fmt.Errorf("Extract: copy file: %w", err)
	}
	return nil
}

// type voiceInfo struct {
// 	ONXX      string
// 	ModelCard string
// 	JSON      string
// }

func hashFile(hs hash.Hash, fn string) error {
	f, err := os.Open(fn)
	if err != nil {
		return err
	}
	if _, err := io.Copy(hs, f); err != nil {
		return err
	}
	return nil
}

func runCmd(dir string, name string, args ...string) error {
	stderr := bytes.NewBuffer(nil)
	cmd := exec.Command(name, args...)
	cmd.Stderr = stderr
	cmd.Stdout = stderr
	cmd.Dir = dir
	if err := cmd.Run(); err != nil {
		return fmt.Errorf("runCmd: %s: %w: %s", cmd, err, stderr.Bytes())
	}
	return nil
}

func finalizePkg(voicePkg bool, pkgDir, embedPkgName, pkgPath string, assetName string, version string, embedPaths ...string) error {
	embedPaths = append([]string{
		piper.DistArcName,
		piper.DistMetaName,
	}, embedPaths...)

	embedGo := []byte(`// GENERATED FILE

package ` + embedPkgName + `

import (
	"embed"
	"github.com/amitybell/piper-asset"
)

var (
	//go:embed ` + strings.Join(embedPaths, " ") + `
	fs embed.FS

	Asset = asset.Asset{Name: "` + assetName + `", FS: fs}
)
`)
	goMod := []byte(`
module ` + pkgPath + `

go 1.21

`)

	license := []byte(`
MIT License

Copyright (c) 2023 Amity Bell

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
`)

	distLicense := "https://github.com/rhasspy/piper"
	if voicePkg {
		distLicense = "[MODEL_CARD.txt](MODEL_CARD.txt)"
	}

	readmeMd := []byte(`
Package auto-generated by https://github.com/amitybell/piper-gen

- Package license: See [LICENSE](LICENSE)
- dist.tar.zst license: See ` + distLicense + `
- See https://github.com/amitybell/piper for docs
`)

	if err := os.WriteFile(filepath.Join(pkgDir, "embed.go"), embedGo, 0o644); err != nil {
		return err
	}
	if err := os.WriteFile(filepath.Join(pkgDir, "go.mod"), goMod, 0o644); err != nil {
		return err
	}
	if err := os.WriteFile(filepath.Join(pkgDir, "README.md"), readmeMd, 0o644); err != nil {
		return err
	}
	if err := os.WriteFile(filepath.Join(pkgDir, "LICENSE"), license, 0o644); err != nil {
		return err
	}
	if err := installMeta(pkgDir, version, filepath.Join(pkgDir, piper.DistArcName)); err != nil {
		return err
	}
	if err := runCmd(pkgDir, "go", "mod", "tidy"); err != nil {
		return err
	}
	if err := runCmd(pkgDir, "go", "build", "."); err != nil {
		return err
	}
	return nil
}

func installMeta(dir string, version string, fns ...string) error {
	fns = append([]string(nil), fns...)
	sort.Strings(fns)

	hs := xxh3.New()
	for _, fn := range fns {
		if err := hashFile(hs, fn); err != nil {
			return fmt.Errorf("installMeta: generate hash: %w", err)
		}
	}
	src, err := json.Marshal(Meta{
		Version: version,
		Hash:    hs.Sum128(),
	})
	if err != nil {
		return fmt.Errorf("installMeta: Marshal: %w", err)
	}
	if err := os.WriteFile(filepath.Join(dir, piper.DistMetaName), src, 0o644); err != nil {
		return fmt.Errorf("installMeta: write hash file: %w", err)
	}
	return nil
}

func copyFile(dstFn, srcFn string) error {
	r, err := os.Open(srcFn)
	if err != nil {
		return fmt.Errorf("copyFile: open `%s`: %w", srcFn, err)
	}
	defer r.Close()

	w, err := os.Create(dstFn)
	if err != nil {
		return fmt.Errorf("copyFile: create `%s`: %w", dstFn, err)
	}
	_, copyErr := io.Copy(w, r)
	closeErr := w.Close()
	if copyErr != nil {
		return fmt.Errorf("copyFile: copy(`%s`, `%s`): %w", dstFn, srcFn, err)
	}
	if closeErr != nil {
		return fmt.Errorf("copyFile: close `%s`: %w", dstFn, err)
	}
	return nil
}

func installVoice(rootDir, name string, version string, urls []string) error {
	pkgBase := "piper-voice-" + name
	pkgDir := filepath.Join(rootDir, pkgBase)
	pkgPath := "github.com/amitybell/" + pkgBase

	arcFn := filepath.Join(pkgDir, piper.DistArcName)
	tzw, err := createTarZst(arcFn)
	if err != nil {
		return fmt.Errorf("installVoice: %w", err)
	}

	modelDlFn := ""
	for _, url := range urls {
		nm := filepath.Base(url)
		ext := filepath.Ext(nm)
		switch {
		case nm == "MODEL_CARD":
		case ext == ".onnx":
			nm = "voice.onnx"
		case ext == ".json":
			nm = "voice.json"
		default:
			return fmt.Errorf("installVoice: Unsupported file: %s", nm)
		}
		dlFn, err := download(rootDir, url)
		if err != nil {
			return fmt.Errorf("installVoice: %w", err)
		}
		if err := tzw.AppendFile(nm, dlFn); err != nil {
			return fmt.Errorf("installVoice: %w", err)
		}
		if nm == "MODEL_CARD" {
			modelDlFn = dlFn
		}
	}

	if err := tzw.Close(); err != nil {
		return fmt.Errorf("installVoice: close archive: %w", err)
	}
	if err := copyFile(filepath.Join(pkgDir, "MODEL_CARD.txt"), modelDlFn); err != nil {
		return fmt.Errorf("installVoice: %w", err)
	}
	if err := finalizePkg(true, pkgDir, name, pkgPath, name, version, "MODEL_CARD.txt"); err != nil {
		return fmt.Errorf("installVoice: %w", err)
	}
	return nil
}

func installPiper(rootDir, pkgName, version, url string) (retErr error) {
	ctx := context.Background()
	pkgBase := "piper-bin-" + pkgName
	pkgPath := "github.com/amitybell/" + pkgBase
	pkgDir := filepath.Join(rootDir, pkgBase)
	dlFn, err := download(rootDir, url)
	if err != nil {
		return fmt.Errorf("installPiper: %w", err)
	}
	srcFile, err := os.Open(dlFn)
	if err != nil {
		return fmt.Errorf("installPiper: open archive: %w", err)
	}
	defer srcFile.Close()

	srcFmt, stream, err := archiver.Identify(srcFile.Name(), srcFile)
	if err != nil {
		return fmt.Errorf("installPiper: identify archive: %w", err)
	}

	srcArc, ok := srcFmt.(archiver.Extractor)
	if !ok {
		return fmt.Errorf("installPiper: %T is not an archiver.Extractor: `%s`", srcFmt, srcFile.Name())
	}

	dstFn := filepath.Join(pkgDir, piper.DistArcName)
	tzw, err := createTarZst(dstFn)
	if err != nil {
		return fmt.Errorf("installPiper: %w", err)
	}
	err = srcArc.Extract(
		ctx,
		stream,
		[]string{"piper"},
		func(ctx context.Context, f archiver.File) error {
			fm := f.Mode()
			if !fm.IsRegular() && fm&os.ModeSymlink == 0 {
				return nil
			}
			r, err := f.Open()
			if err != nil {
				return err
			}
			defer r.Close()
			h := &tar.Header{
				Name:     strings.TrimPrefix(f.NameInArchive, "piper/"),
				Mode:     int64(f.Mode()),
				Size:     f.Size(),
				Linkname: f.LinkTarget,
			}
			if fm&os.ModeSymlink != 0 {
				h.Typeflag = tar.TypeSymlink
			}
			return tzw.Append(h, r)
		},
	)
	if e := tzw.Close(); e != nil && err == nil {
		return fmt.Errorf("installPiper: close tar.zst: %w", e)
	}
	if err != nil {
		return fmt.Errorf("installPiper: extract: %w", err)
	}
	if err := finalizePkg(false, pkgDir, pkgName, pkgPath, pkgName, version); err != nil {
		return fmt.Errorf("installPiper: %w", err)
	}
	return nil
}

func main() {
	dir := flag.String("dir", "", "root directory to extract store files")
	flag.Parse()
	if *dir == "" {
		fmt.Fprintln(os.Stderr, "-dir is required.")
		flag.PrintDefaults()
		os.Exit(1)
	}

	// more voices at https://huggingface.co/rhasspy/piper-voices/tree/v1.0.0
	voiceVersion := "1.0.0"
	voiceURLPfx := "https://huggingface.co/rhasspy/piper-voices/resolve/v" + voiceVersion
	voices := map[string][]string{
		// "irina": {
		// 	voiceURLPfx + "/ru/ru_RU/irina/medium/ru_RU-irina-medium.onnx",
		// 	voiceURLPfx + "/ru/ru_RU/irina/medium/ru_RU-irina-medium.onnx.json",
		// 	voiceURLPfx + "/ru/ru_RU/irina/medium/MODEL_CARD",
		// },
		"ruslan": {
			voiceURLPfx + "/ru/ru_RU/ruslan/medium/ru_RU-ruslan-medium.onnx",
			voiceURLPfx + "/ru/ru_RU/ruslan/medium/ru_RU-ruslan-medium.onnx.json",
			voiceURLPfx + "/ru/ru_RU/ruslan/medium/MODEL_CARD",
		},

		// "denis": {
		// 	voiceURLPfx + "/ru/ru_RU/denis/medium/ru_RU-denis-medium.onnx",
		// 	voiceURLPfx + "/ru/ru_RU/denis/medium/ru_RU-denis-medium.onnx.json",
		// 	voiceURLPfx + "/ru/ru_RU/denis/medium/MODEL_CARD",
		// },
		"dmitri": {
			voiceURLPfx + "/ru/ru_RU/dmitri/medium/ru_RU-dmitri-medium.onnx",
			voiceURLPfx + "/ru/ru_RU/dmitri/medium/ru_RU-dmitri-medium.onnx.json",
			voiceURLPfx + "/ru/ru_RU/dmitri/medium/MODEL_CARD",
		},
		// "jenny": {
		// 	voiceURLPfx + "/en/en_GB/jenny_dioco/medium/en_GB-jenny_dioco-medium.onnx",
		// 	voiceURLPfx + "/en/en_GB/jenny_dioco/medium/en_GB-jenny_dioco-medium.onnx.json",
		// 	voiceURLPfx + "/en/en_GB/jenny_dioco/medium/MODEL_CARD",
		// },
		// "alan": {
		// 	voiceURLPfx + "/en/en_GB/alan/medium/en_GB-alan-medium.onnx",
		// 	voiceURLPfx + "/en/en_GB/alan/medium/MODEL_CARD",
		// 	voiceURLPfx + "/en/en_GB/alan/medium/en_GB-alan-medium.onnx.json",
		// },
		// "vi": {
		// 	voiceURLPfx + "/vi/vi_VN/vivos/x_low/vi_VN-vivos-x_low.onnx",
		// 	voiceURLPfx + "/vi/vi_VN/vivos/x_low/MODEL_CARD",
		// 	voiceURLPfx + "/vi/vi_VN/vivos/x_low/vi_VN-vivos-x_low.onnx.json",
		// },
	}
	for name, urls := range voices {
		if err := installVoice(*dir, name, voiceVersion, urls); err != nil {
			log.Fatalln(err)
		}
	}

	piperVersion := "2023.11.14-2"
	archives := map[string]string{
		// "linux_x86_64": "https://github.com/rhasspy/piper/releases/download/" + piperVersion + "/piper_linux_x86_64.tar.gz",
		"linux_armv64": "https://github.com/rhasspy/piper/releases/download/" + piperVersion + "/piper_linux_aarch64.tar.gz",
		// "windows": "https://github.com/rhasspy/piper/releases/download/" + piperVersion + "/piper_windows_amd64.zip",
	}
	for plaform, url := range archives {
		if err := installPiper(*dir, plaform, piperVersion, url); err != nil {
			log.Fatalln(err)
		}
	}
}
